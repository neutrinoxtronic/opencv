#!/bin/python
# usage:
#     python3 parser_clblast.py /path/to/clblast_c.h

import sys
from common import *

try:
    f = open(sys.argv[1], "r")
except:
    sys.exit("ERROR. Can't open input file")

''' Retrieve functions in the following form:
    [
        fn0=dict(
            modifiers=[],
            ret=["CLBlastStatusCode"],
            calling=[],
            name="CLBlastSgemm",
            params=["const CLBlastLayout layout", ..., "cl_event* event"],
        ),
        fn1,
        ...
    ]
'''
function_list = list()
while True:
    line = f.readline()
    # break when reaching the end of file
    if len(line) == 0:
        break

    line = line.strip()
    if line.startswith("CLBlastStatusCode"):
        if "(" in line and ");" in line:
            # single line definition
            # print(line)
            pass
        else:
            # multiple lines definition
            next_line = f.readline()
            while True:
                next_line = next_line.strip()
                line += " " + next_line
                if ");" in next_line:
                    break
                next_line = f.readline()
            # print(line)

        line = remove_comments(line)
        # print(line)
        parts = getTokens(line)
        # print(parts[2])
        # print(parts[0], parts[2])
        params = getParameters(3, parts)
        # print(params)
        function_list.append(dict(
            modifiers=[],
            ret=[parts[0]],
            calling=[],
            name=parts[2],
            params=params,
        ))

f.close()
print("#total {}".format(len(function_list)))

postProcessParameters(function_list)

from pprint import pprint
# pprint(function_list)

filter_file_name = "./filter/opencl_clblast_functions.list"
num_enabled_functions = readFunctionFilter(function_list, filter_file_name)

filtered_function_list = generateFilterNames(function_list)
filter_file = open(filter_file_name, 'w')
filter_file.write(filtered_function_list)

max_num_params = 0
for f in function_list:
    # if "enabled" in f and f["enabled"]:
    #     print(f)
    if len(f["params"]) > max_num_params:
        max_num_params = len(f["params"])
        # print(f["name"], max_num_params, f["params"])

ctx = dict(
    CLBLAST_REMAP_ORIGIN=generateRemapOrigin(function_list),
    CLBLAST_REMAP_DYNAMIC=generateRemapDynamic(function_list),
    CLBLAST_FN_DECLARATIONS=generateFnDeclaration(function_list),
)

sys.stdout = open('../../../../include/opencv2/core/opencl/runtime/autogenerated/opencl_clblast.hpp', 'w')
ProcessTemplate('template/opencl_clblast.hpp.in', ctx)

ctx['CL_FN_ENUMS'] = generateEnums(function_list, 'OPENCL_CLBLAST_FN', )
ctx['CL_FN_SWITCH'] = generateTemplates(max_num_params, 'opencl_clblast_fn', 'opencl_clblast_check_fn', '')
ctx['CL_FN_ENTRY_DEFINITIONS'] = generateStructDefinitions(function_list, 'opencl_clblast_fn', 'OPENCL_CLBLAST_FN')
ctx['CL_FN_ENTRY_LIST'] = generateListOfDefinitions(function_list, 'opencl_clblast_fn')
ctx['CL_NUMBER_OF_ENABLED_FUNCTIONS'] = '// number of enabled functions: %d' % (num_enabled_functions)

sys.stdout = open('../autogenerated/opencl_clblast_impl.hpp', 'w')
ProcessTemplate('template/opencl_clblast_impl.hpp.in', ctx)
