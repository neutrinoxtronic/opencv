// This file is part of OpenCV project.
// It is subject to the license terms in the LICENSE file found in the top-level directory
// of this distribution and at http://opencv.org/license.html.

#include "../../precomp.hpp"

#ifdef HAVE_CLBLAST

#include "opencv2/core/opencl/runtime/opencl_core.hpp"
#include "opencv2/core/opencl/runtime/opencl_clblast.hpp"

#if defined(_WIN32)
#include <windows.h>

    static void* WinGetProcAddress(const char* name) {
        static HMODULE opencl_module = NULL;
        if (!opencl_module) {
            opencl_module = GetModuleHandleA("clblast.dll");
            if (!opencl_module) {
                opencl_module = LoadLibraryA("clblast.dll");
                if (!opencl_module)
                    return NULL;
            }
        }
        return (void*)GetProcAddress(opencl_module, name);
    }
    #define CV_CL_GET_PROC_ADDRESS(name) WinGetProcAddress(name)
#endif // _WIN32

#if defined(__linux__) || defined(__APPLE__)
    #include <dlfcn.h>
    #include <stdio.h>

    static void* GetProcAddress (const char* name) {
        static void* h = NULL;
        if (!h) {
            #if defined (__linux__)
            h = dlopen("libclblast.so", RTLD_LAZY | RTLD_GLOBAL);
            #endif
            #if defined (__APPLE__)
            h = dlopen("libclblast.dylib", RTLD_LAZY | RTLD_GLOBAL);
            #endif
            if (!h) {
                printf("handle is null\n");
                return NULL;
            }
        }

        return dlsym(h, name);
    }
    #define CV_CL_GET_PROC_ADDRESS(name) GetProcAddress(name)
#endif // __linux__ or __APPLE__

#ifndef CV_CL_GET_PROC_ADDRESS
#ifdef __GNUC__
#warning("OPENCV: CLBlast library loader: check configuration")
#else
#pragma message("WARNING: OPENCV: CLBlast dynamic library loader: check configuration")
#endif
#define CV_CL_GET_PROC_ADDRESS(name) NULL
#endif

static void* opencl_clblast_check_fn(int ID);

#include "runtime_common.hpp"

//
// BEGIN OF CUSTOM FUNCTIONS
//

#define CUSTOM_FUNCTION_ID 1000

//
// END OF CUSTOM FUNCTIONS HERE
//

#include "autogenerated/opencl_clblast_impl.hpp"

static void* opencl_clblast_check_fn(int ID) {
    CV_Assert(ID >= 0 && ID < (int)(sizeof(opencl_clblast_fn)/sizeof(opencl_clblast_fn[0])));
    const struct DynamicFnEntry* e = opencl_clblast_fn[ID];
    void* func = CV_CL_GET_PROC_ADDRESS(e->fnName);
    if (!func) {
        throw cv::Exception(cv::Error::OpenCLApiCallError,
                cv::format("OpenCL CLBlast function is not available: [%s]", e->fnName),
                CV_Func, __FILE__, __LINE__);
    }
    *(e->ppFn) = func;
    return func;
}

#endif // HAVE_CLBLAST
